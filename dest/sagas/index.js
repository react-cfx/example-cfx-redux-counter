'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _cfx = require('cfx.redux-saga');

var _index = require('../constants/index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated by CoffeeScript 2.0.0-beta2
var DECREMENT, DECREMENT_ASYNC, INCREMENT, INCREMENT_ASYNC, assign, call, decrementAsync, delay, incrementAsync, put, rootSaga, takeEvery;

assign = _assign2.default;
takeEvery = _cfx.saga.takeEvery;
put = _cfx.sagaEffects.put;
call = _cfx.sagaEffects.call;
var _constants$types = _index2.default.types;
INCREMENT = _constants$types.INCREMENT;
INCREMENT_ASYNC = _constants$types.INCREMENT_ASYNC;
DECREMENT = _constants$types.DECREMENT;
DECREMENT_ASYNC = _constants$types.DECREMENT_ASYNC;


delay = function delay(ms) {
  return new _promise2.default(function (resolve) {
    return setTimeout(resolve, ms);
  });
};

incrementAsync = _regenerator2.default.mark(function incrementAsync(action) {
  return _regenerator2.default.wrap(function incrementAsync$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return call(delay, 1000);

        case 2:
          _context.next = 4;
          return (0, _cfx.dispatch)(action, INCREMENT);

        case 4:
        case 'end':
          return _context.stop();
      }
    }
  }, incrementAsync, this);
});

decrementAsync = _regenerator2.default.mark(function decrementAsync(action) {
  return _regenerator2.default.wrap(function decrementAsync$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return call(delay, 1000);

        case 2:
          _context2.next = 4;
          return (0, _cfx.dispatch)(action, DECREMENT);

        case 4:
        case 'end':
          return _context2.stop();
      }
    }
  }, decrementAsync, this);
});

rootSaga = [_regenerator2.default.mark(function _callee() {
  return _regenerator2.default.wrap(function _callee$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          return _context3.delegateYield(takeEvery(INCREMENT_ASYNC, incrementAsync), 't0', 1);

        case 1:
          return _context3.abrupt('return', _context3.t0);

        case 2:
        case 'end':
          return _context3.stop();
      }
    }
  }, _callee, this);
}), _regenerator2.default.mark(function _callee2() {
  return _regenerator2.default.wrap(function _callee2$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          return _context4.delegateYield(takeEvery(DECREMENT_ASYNC, decrementAsync), 't0', 1);

        case 1:
          return _context4.abrupt('return', _context4.t0);

        case 2:
        case 'end':
          return _context4.stop();
      }
    }
  }, _callee2, this);
})];

exports.default = rootSaga;